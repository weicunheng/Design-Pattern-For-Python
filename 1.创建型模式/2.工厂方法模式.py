"""Factory Method Pattern"""
"""
模式动机:
    1. 不再设计一个按钮工厂来统一负责所有产品的创建
    2. 将具体的按钮的创建过程交给专门的工厂子类去完成
    3. 我们先定义一个抽象的按钮工厂类
    4. 再定义具体的工厂类来生成圆形、矩形、棱形按钮，他们实现抽象按钮工厂类中定义的方法
    5. 这种抽象化的结果使得可以在不修改具体工厂类的情况下引进新产品
    6. 如果出现新的按钮类型，只需要为这种新类型的按钮创建一个具体的工厂类就可以获得该新按钮的实例
    7. 这一特性无疑使得工厂方法模式超越简单工厂模式，更符合"开闭原则"
"""

"""
模式定义:
    工厂方法模式又称为工厂模式，也叫虚拟构造器模式或多态工厂模式，它属于类创建型模式
    在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口
    而工厂子类则负责生成具体的产品对象
    将产品类的实例化操作转移到工厂子类中完成
    通过工厂子类来确定究竟应该实例化哪一个具体产品类
"""

"""
模式结构:
    1. Product 抽象产品
    2. Concreate Product 具体产品
    3. Factory 抽象工厂
    4. Concreate Factory 具体工厂
"""
import abc


class ButtonProduct(metaclass=abc.ABCMeta):

    def __init__(self, form):
        self.form = form

    def __str__(self):
        return self.form

class BaseFactory(metaclass=abc.ABCMeta):
    def __init__(self, form):
        self.form = form

    @abc.abstractmethod
    def create_button(self):
        pass

class CircleButtonFactory(BaseFactory):
    def __init__(self):
        super().__init__('circle')

    def create_button(self):
        return CircleButtonConcreate()

class RectangleButtonFactory(BaseFactory):
    def __init__(self):
        super().__init__('rectangle')

    def create_button(self):
        return RectangleButtonConcreate()

class CircleButtonConcreate(ButtonProduct):
    def __init__(self):
        super().__init__("Circle")


class RectangleButtonConcreate(ButtonProduct):
    def __init__(self):
        super().__init__("Rectang")


if __name__ == '__main__':
    circle_factory = CircleButtonFactory()
    circle_button = circle_factory.create_button()
    print(circle_button)

"""
模式分析:
    工厂方法模式是简单工厂模式的进一步抽象和推广
    使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点
    在工厂方法模式中，核心工厂类不再负责所有产品的创建
    将具体的创建交给其子类去做
    这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责哪一个产品类被实例化这种细节
    这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品
    
"""

"""
实例:
    日志记录器
     日志记录系统要求支持多种日志记录方式，如文件记录、数据库记录等，且根据要求动态选择日志记录方式
"""

"""
优点:
    在工厂方法模式中，工厂方法用来创建具体的产品，同时还向用户隐藏了哪种具体产品类实例化这一细节
    用户只需要关心产品对应的工厂，无需关心具体的创建细节，甚至无需知道具体产品的类名
    基于工厂角色和产品角色的多态性设计是工厂方法模式的关键
    它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节完全封装在具体工厂内部
    工厂方法模式又称为多态工厂模式，是因为所有的具体工厂类都具有同一抽象父类
    工厂方法模式另一个有点就是在系统加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无需修改客户端，也无需修改其他具体工厂和具体产品
    只要添加一个具体工厂和具体产品就可以了
    系统可扩展性好，完全符合"开闭原则"。
缺点:
    在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数成对增加，在一定程度上增加了系统的复杂度
    有更多的类需要编译和运行，会给系统带来一些额外的开销
    由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统抽象性和理解难度
    且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度    
 
"""

"""
适用环境:
    1. 一个类不知道它所需要的对象类
    2. 在工厂方法模式中，客户端不需要知道具体产品类的名字，只需要知道所对应的工厂即可
    3. 具体的产品对象由具体工厂创建，客户端需要知道创建具体产品的工厂类
    4. 一个类通过子类来制定创建那个对象
    5. 在抽象工厂类中，只需要提供一个创建产品的接口，而由其子类来确定要创建的对象，利用面向对象的多态性和里氏代换原则
    6. 在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。
    7. 将创建对象的任务委托给多个工厂子类中的某一个
    8. 客户端在使用时可以无须关心是哪一个工厂子类创建产品子类
    9. 需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。
"""

"""
模式应用:
    Connection conn= DriverManager.getConnection("jdbc:microsoft:sqlserver://localhost:1433; DatabaseName=DB;user=sa;password=");
    Statement statement=conn.createStatement();
    ResultSet rs=statement.executeQuery("select * from UserInfo");
"""

"""
模式扩展:
    1. 使用多个工厂方法：
        在抽象工厂角色中可以定义多个工厂方法，从而使具体工厂角色实现这些不同的工厂方法，
        这些方法可以包含不同的业务逻辑，以满足对不同的产品对象的需求。
    2. 产品对象的重复使用：
        工厂对象将已经创建过的产品保存到一个集合（如数组、List等）中
        然后根据客户对产品的请求，对集合进行查询
        如果有满足要求的产品对象，就直接将该产品返回客户端
        如果集合中没有这样的产品对象，那么就创建一个新的满足要求的产品对象，然后将这个对象在增加到集合中，再返回给客户端。
    3. 多态性的丧失和模式的退化:
        如果工厂仅仅返回一个具体产品对象，便违背了工厂方法的用意
        工厂对象应当有一个抽象的父类型，如果工厂等级结构中只有一个具体工厂类的话，抽象工厂就可以省略，也将发生了退化。
        当只有一个具体工厂，在具体工厂中可以创建所有的产品对象，并且工厂方法设计为静态方法时，工厂方法模式就退化成简单工厂模式。
"""

"""
工厂方法模式又称为工厂模式，它属于类创建型模式。
在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，
这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。
工厂方法模式包含四个角色：   
    抽象产品是定义产品的接口，是工厂方法模式所创建对象的超类型，即产品对象的共同父类或接口；
    具体产品实现了抽象产品接口，某种类型的具体产品由专门的具体工厂创建，它们之间往往一一对应；
    抽象工厂中声明了工厂方法，用于返回一个产品，它是工厂方法模式的核心，任何在模式中创建对象的工厂类都必须实现该接口；
    具体工厂是抽象工厂类的子类，实现了抽象工厂中定义的工厂方法，并可由客户调用，返回一个具体产品类的实例。
工厂方法模式是简单工厂模式的进一步抽象和推广。
由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。
在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。
这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。
工厂方法模式的主要优点是增加新的产品类时无须修改现有系统，并封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性；
其缺点在于增加新产品的同时需要增加新的工厂，导致系统类的个数成对增加，在一定程度上增加了系统的复杂性。
工厂方法模式适用情况包括：
    一个类不知道它所需要的对象的类；
    一个类通过其子类来指定创建哪个对象；
    将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定。
"""