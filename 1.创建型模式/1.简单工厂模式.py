"""Simple Factory Pattern"""
"""
考虑一个简单的软件应用场景:
    1. 一个软件系统可以提供多个外观不同的按钮(圆形按钮、矩形按钮、菱形按钮)
    2. 这些按钮都源于同一个基类
    3. 在继承基类后不同的子类修改了部分属性，从而使得他们呈现不同的外观
    4. 在使用这些按钮时，不需要知道这些类的具体名字，只需要知道表示该类的一个参数，并提供一个调用方便的方法
    5. 将该参数传入方法即可返回一个相应的按钮对象
"""

"""
模式定义:
    1. 简单工厂模式，又称为静态工厂方法模式，它属于类创建型模式
    2. 在简单工厂模式中，可以根据不同参数返回不同类型的实例
    3. 简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都有共同的父类
"""

"""
模式结构:
    1. Factory: 工厂角色
        负责实现创建所有实例的内部逻辑
    2. Product: 抽象产品角色
        是所创建的所有对象的父类，负责描述所有实例所共有的公共接口
    3. Concreate Product: 具体产品角色
        具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例
"""

"""
流程:
    根据参数，Factory创建某一个具体的产品，每一个具体的产品都继承自抽象产品角色
"""


class ButtonProduct(object):
    """
    1. 颜色
    2. 形状
    """

    def __init__(self, form):
        self.form = form

    def __str__(self):
        return self.form


class CircleButtonConcreate(ButtonProduct):
    def __init__(self):
        super().__init__("Circle")


class RectangleButtonConcreate(ButtonProduct):
    def __init__(self):
        super().__init__("Rectang")


class ButtonFactory(object):
    @classmethod
    def create_product(self, form):
        if form == "circle":
            return CircleButtonConcreate()
        elif form == "rectang":
            return RectangleButtonConcreate()

if __name__ == '__main__':

    product = ButtonFactory.create_product("circle")
    print(product)

"""
模型分析:
    简单工厂模式要点在于:当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节
    
    优点:
        1. 将对象的创建和对象的具体业务处理分离可以降低耦合度，使两者修改起来都相对容易
        2. 在调用工厂类的工厂方法时，由于工厂方法是静态的，只需要传入一个参数即可，还可以将传入的参数存到配置文件中，修改参数时，无需修改任何源代码
    缺点:
        1. 简单工厂模式最大的问题就是工厂类的职责相对过重，增加新产品时需要修改工厂类的判断逻辑，这一点是与开闭原则是相违背的。
        2. 系统扩展困难，一但添加新产品，就不得不修改工厂逻辑，在产品类型较多的时候，有可能造成工厂逻辑复杂，不利于系统的维护和扩展
        
"""

"""
适用环境:
    工厂类负责创建的对象比较少，不会造成工厂方法中业务逻辑太复杂
    客户端只需要传入正确的参数，而不需要关心如何创建对象，客户端不需要关注细节，甚至不用记住类名，只需知道类型所对应的参数
    
"""

"""
简单工厂使用:
    1. 格式化本地日期或者时间
    2. 获取不同加密算法的密钥生成器
    3. 创建密码器
"""

"""
总结:
    1. 将对象的创建和对象的使用过程分离
    2. 简单工厂模式又称为静态工厂方法模式，它属于类创建型模式。
    3. 在简单工厂模式中，可以根据参数的不同返回不同类的实例。
    4. 简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。
    5. 简单工厂模式包含三个角色：工厂角色负责实现创建所有实例的内部逻辑；抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。
    6. 简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。
    7. 简单工厂模式最大的优点在于实现对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责，但是其最大的缺点在于工厂类不够灵活，增加新的具体产品需要修改工厂类的判断逻辑代码，而且产品较多时，工厂方法代码将会非常复杂。
    8. 简单工厂模式适用情况包括：工厂类负责创建的对象比较少；客户端只知道传入工厂类的参数，对于如何创建对象不关心。
"""