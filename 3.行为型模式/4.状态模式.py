"""State Pattern"""
"""
模式动机:
    在很多情况下，一个对象的行为取决于一个或多个动态变化的属性，这样的属性叫做状态，这样的对象叫做有状态的(stateful)对象，
    这样的对象状态是从事先定义好的一系列值中取出的。
    当一个这样的对象与外部事件产生互动时，其内部状态就会改变，从而使得系统的行为也随之发生变化。
    在UML中可以使用状态图来描述对象状态的变化。
    
    创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。
"""

"""
模式定义:
    状态模式(State Pattern) ：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。
    其别名为状态对象(Objects for States)，状态模式是一种对象行为型模式。
"""

"""
模式角色
    Context: 环境类
    State: 抽象状态类
    ConcreteState: 具体状态类
"""

"""
意图：
    允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。
主要解决    
    对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。
何时使用：
    代码中包含大量与对象状态有关的条件语句。
如何解决：
    将各种具体的状态类抽象出来。
    
关键代码：
    通常命令模式的接口中只有一个方法。
    而状态模式的接口中有一个或者多个方法。
    而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。
    也就是说，状态模式一般和对象的状态有关。
    实现类的方法有不同的功能，覆盖接口中的方法。
    状态模式和命令模式一样，也可以用于消除 if...else 等条件选择语句。
应用实例： 
    1、打篮球的时候运动员可以有正常状态、不正常状态和超常状态。 
    2、曾侯乙编钟中，'钟是抽象接口','钟A'等是具体状态，'曾侯乙编钟'是具体环境（Context）。
使用场景:
    1、行为随状态改变而改变的场景。
    2、条件、分支语句的代替者。
注意事项:
    在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。  
"""

"""
优点：    
    1、封装了转换规则。 
    2、枚举可能的状态，在枚举状态之前需要确定状态种类。 
    3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 
    4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 
    5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。
    
    封装了转换规则。
    枚举可能的状态，在枚举状态之前需要确定状态种类。
    将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。
    允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。
    可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。
    
"""
"""
缺点:
    1、状态模式的使用必然会增加系统类和对象的个数。 
    2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 
    3、状态模式对"开闭原则"的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。
    
    状态模式的使用必然会增加系统类和对象的个数。
    状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。
    状态模式对“开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态；而且修改某个状态类的行为也需修改对应类的源代码。

"""
import abc

class State(metaclass=abc.ABCMeta):

    @abc.abstractmethod
    def doAction(self, context):
        pass

class StartState(State):
    def doAction(self, context):
        print("Player is in start state")
        context.setState(self)

    def __str__(self):
        return "开始"

class StopState(State):
    def doAction(self, context):
        print("Player is in stop state")
        context.setState(self)

    def __str__(self):
        return "结束"



class Context():

    def __init__(self):
        self.state = None

    def setState(self, state):
        self.state = state

    def getState(self):
        return self.state


if __name__ == '__main__':
    context = Context()
    startState = StartState()
    startState.doAction(context)  # change state
    print(context.getState())

    stopState = StopState()
    stopState.doAction(context)
    print(context.getState())

"""
模式分析:
    1. 状态模式描述了对象状态的变化，以及对象在不同状态下表现不同的行为
    2. 状态模式的关键就是引入了一个抽象类来专门标识对象的状态，这个类我们叫做抽象状态类
    而对象的每一种状态类都继承了该类，并在不同具体状态类中实现了不同状态的行为，包括了不同状态的转换
    
    Context实际上是拥有状态的对象，有时候可以充当状态管理器(State Manager)的角色，可以在Context类中对状态进行切换操作。
    抽象状态类可以是抽象类，也可以是接口，不同状态类就是继承这个父类的不同子类，
    状态类的产生是由于环境类存在多个状态，同时还满足两个条件：
        这些状态经常需要切换
        在不同的状态下对象的行为不同。
    使得环境类对象在其内部状态改变时可以改变它的行为，对象看起来似乎修改了它的类，而实际上是由于切换到不同的具体状态类实现的。
 
    
"""
"""
实例:
    TCPConnection
"""

"""

总结：
    状态模式允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象，状态模式是一种对象行为型模式。
    状态模式包含三个角色：环境类又称为上下文类，它是拥有状态的对象，在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象，可以定义初始状态；抽象状态类用于定义一个接口以封装与环境类的一个特定状态相关的行为；具体状态类是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。
    状态模式描述了对象状态的变化以及对象如何在每一种状态下表现出不同的行为。
    状态模式的主要优点在于封装了转换规则，并枚举可能的状态，它将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为，还可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数；其缺点在于使用状态模式会增加系统类和对象的个数，且状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱，对于可以切换状态的状态模式不满足“开闭原则”的要求。
    状态模式适用情况包括：对象的行为依赖于它的状态（属性）并且可以根据它的状态改变而改变它的相关行为；代码中包含大量与对象状态有关的条件语句，这些条件语句的出现，会导致代码的可维护性和灵活性变差，不能方便地增加和删除状态，使客户类与类库之间的耦合增强。
"""
